/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MainWindow;

import Login.LoginMain;
import java.awt.Component;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import Login.MySqlConnect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author skasr
 */
public class todoWindow extends javax.swing.JFrame {

    /**
     * Creates new form todoWindow
     */
    Connection conn=null;
    PreparedStatement pst=null;
    ResultSet rs = null;
    String username;
    void load_from_db_list()
    {
        conn = MySqlConnect.ConnectDB();
        String Sql="Select * from todo_list where username=?";
        try {
            pst=conn.prepareStatement(Sql);
            pst.setString(1, username);
            
            rs = pst.executeQuery();
             DefaultListModel m2 = new DefaultListModel<CheckboxListItem>();
             System.out.println(username);
            while(rs.next()) {
                 m2.addElement(new CheckboxListItem(rs.getString(2)));
                 System.out.println(rs.getString(1));
            }
            jList1.setModel(m2);
            
        } catch (SQLException ex) {
            Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public todoWindow(String username) {
        this.username = username;
        initComponents();
        load_from_db_list();
        
         jList1.setCellRenderer(new CheckboxListRenderer());
      jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      
      
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        eve = new javax.swing.JTextField();
        add_eve = new javax.swing.JLabel();
        lb_compl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("TODO List");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(331, 19, 110, 60));

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 590, 210));
        getContentPane().add(eve, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 440, 30));

        add_eve.setText("Add ");
        add_eve.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_eveMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                add_eveMousePressed(evt);
            }
        });
        getContentPane().add(add_eve, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 120, 90, 30));

        lb_compl.setText("Completed");
        lb_compl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lb_complMousePressed(evt);
            }
        });
        getContentPane().add(lb_compl, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 350, 90, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_eveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_eveMousePressed
        // TODO add your handling code here:
//        ListModel<CheckboxListItem> m = jList1.getModel();
//        DefaultListModel m2 = new DefaultListModel<CheckboxListItem>();
//        System.out.println("Model size:" + m.getSize());
//        for(int i=0; i < m.getSize(); i++)
//        {
//            m2.addElement(m.getElementAt(i));
//        }
//       
//        m2.addElement(new CheckboxListItem(eve.getText()));
//        jList1.setModel(m2);
        if(eve.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Text Field is Empty!");
            return;
        }
        String uname = username;
        String event = eve.getText();
        PreparedStatement ps;
        String query = "INSERT INTO todo_list values(?,?)";
        try {
            ps = MySqlConnect.ConnectDB().prepareStatement(query);
            ps.setString(1, uname);
            ps.setString(2, event);
            if(ps.executeUpdate() > 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Added a to-do");
            }
        } catch (SQLException ex) {
             JOptionPane.showMessageDialog(rootPane, "Error in adding");
        }
        load_from_db_list();
        eve.setText("");
    }//GEN-LAST:event_add_eveMousePressed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
         JList<CheckboxListItem> list =
               (JList<CheckboxListItem>) evt.getSource();
 
            // Get index of item clicked
 
            int index = list.locationToIndex(evt.getPoint());
            CheckboxListItem item = new CheckboxListItem(" ");
            System.out.println("index " + index);
            try {
            item = (CheckboxListItem) list.getModel()
                  .getElementAt(index);
            }
            catch(Exception e)
            {
                System.out.println("INdex out of bounds");
            }
 
            // Toggle selected state
 
            item.setSelected(!item.isSelected());
 
            // Repaint cell
            try {
            list.repaint(list.getCellBounds(index, index));
            }
            catch(Exception e)
            {
                System.out.println("Null pointer exception");
            }
            
      jList1.setModel(list.getModel());
    }//GEN-LAST:event_jList1MouseClicked

    private void lb_complMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_complMousePressed
        // TODO add your handling code here:
        PreparedStatement ps;
        
        ListModel<CheckboxListItem> m = jList1.getModel();
        
        CheckboxListItem event;
            for(int i=0; i < m.getSize(); i++) {
            event =m.getElementAt(i);
            if(event.isSelected())
              System.out.println(event);
            else
                continue;
            
            String query = "DELETE from todo_list where username=? and event=?";
            try {
            ps = MySqlConnect.ConnectDB().prepareStatement(query);
            ps.setString(1, username);
            ps.setString(2, event.toString());
                
                    if(ps.executeUpdate() == 0)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Error");
                        this.dispose();
                    }   } catch (SQLException ex) {
                    Logger.getLogger(todoWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            load_from_db_list();
    }//GEN-LAST:event_lb_complMousePressed

    private void add_eveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_eveMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_add_eveMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(todoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(todoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(todoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(todoWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new todoWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add_eve;
    private javax.swing.JTextField eve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<CheckboxListItem> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_compl;
    // End of variables declaration//GEN-END:variables
}
class CheckboxListItem {
   private String label;
   private boolean isSelected = false;
 
   public CheckboxListItem(String label) {
      this.label = label;
   }
 
   public boolean isSelected() {
      return isSelected;
   }
 
   public void setSelected(boolean isSelected) {
      this.isSelected = isSelected;
   }
 
   public String toString() {
      return label;
   }
}
 
// Handles rendering cells in the list using a check box
 
class CheckboxListRenderer extends JCheckBox implements
      ListCellRenderer<CheckboxListItem> {
 
   @Override
   public Component getListCellRendererComponent(
         JList<? extends CheckboxListItem> list, CheckboxListItem value,
         int index, boolean isSelected, boolean cellHasFocus) {
      setEnabled(list.isEnabled());
      setSelected(value.isSelected());
      setFont(list.getFont());
      setBackground(list.getBackground());
      setForeground(list.getForeground());
      setText(value.toString());
      return this;
   }
}